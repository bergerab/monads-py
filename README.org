* Monads
An implementation of several monads in Python (along with their functors and
applicative functors). The implemented monads include:

- [X] Identity
- [X] IO
- [X] Maybe
- [X] Either
- [X] List
- [X] Reader
- [ ] Writer
- [ ] State
- [ ] Continuation

The idea is to keep the semantics of these monads as equivalent as
possible to Haskell's (granted they are in Python after all).

Each supported monad has a ~bind~ method, ~lift~ method (like
~return~), ~app~ method (like ~<*>~), and an ~fmap~ method. Also for monads
that have helper functions I've included a few of them too (such as
~local~ for the Reader monad).

This code takes a little effort to use in real-world code for a few reasons.

First, there's no do-notation so ~lambda~  and
~bind~ must be used instead. 

Second, Python's eager evaluation makes it
cumbersome to write a monad without it running immediately. This isn't
a problem for all monads, but several, like IO have this issue
(whereas the Reader doesn't have this problem). For
example, to make a IO action that takes input and adds an exclaimation
point, you can't assign it to a variable.

#+BEGIN_SRC python
  io_yell_input = io_input() \
      .bind(lambda x: IO.lift(x + '!')).run()
#+END_SRC

This happens even if the ~run()~ call is removed -- if that is missing it will run
each action but the last). For the IO monad this is because bind is
~f(self.run()))~. Meaning the last in a chain of ~bind~ would never get
~run()~ called. But the ~bind~ chain would run, because Python eagerly evaluates.

The code above will ask for input immediately, instead of creating an
IO action that when run asks for input.

You'll have to wrap it in a function.

#+BEGIN_SRC python
  def io_yell_input():
      return io_input() \
	  .bind(lambda x: IO.lift(x + '!')).run()
#+END_SRC

Third, the lack of curried functions in Python as a
default makes Applicative Functors less useful. Here is a basic
example of what you can do in Haskell:

#+BEGIN_SRC haskell
(+) <$> (Just 2) <*> (Just 4)
#+END_SRC

The Python counterpart would only work if you wrote a curried ~plus~ function:

#+BEGIN_SRC python
  def plus(a):
      def inner_plus(b):
	  return a + b
      return inner_plus

  Just(2).fmap(plus).app(Just(4))
#+END_SRC

* Installation
To install, navigate to the root directory and run:
#+BEGIN_SRC shell
pip3 install .
#+END_SRC

* Usage
** Identity
Functions
- ~identity.get()~ extracts the value from the monad.

A pretty useless monad especially in Python.

If you are trying to turn a non-monadic implementation into a monadic
one, one way of doing that is to start with using the identity monad
(this will force you to add in ~lift(x)~ and ~bind(f)~ calls), then switch
to a monad that is useful to your problem (and finally remove the
redundant code that the monad already is handling for you).

Here is an example of adding two numbers inside of the Identity monad:
#+BEGIN_SRC python
  Identity.lift(3).bind(lambda x:
			Identity.lift(2).bind(lambda y: Identity.lift(x + y))).fmap(lambda x: print x)
#+END_SRC

And using it as an applicative:

#+BEGIN_SRC python
  Identity.lift(lambda x: x + 2).app(Identity.lift(4)).fmap(lambda x: print(x))
#+END_SRC
These examples can be found in ~examples/identity.py~.

** IO
The IO monad provides several helper functions:
- ~io_print~ :: a -> IO ()
  - Prints the given value (no added newline)
- ~io_println~ :: a -> IO ()
  - Prints the given value and adds a newline at the end
- ~io_write~ :: Handle -> String -> IO ()
  - Writes a string to a file handle
- ~io_close~ :: Handle -> IO ()
  - Closes a file handle
- ~io_input~ :: IO String
  - Asks for input from stdin (uses ~input()~)
- ~io_open~ :: FilePath -> IOMode -> IO Handle
  - where FilePath and IOMode = String
  - Opens a file handle for a file at file path FilePath with IOMode
    read/write permissions (uses ~open(...)~).
- ~io_action.then(m)~ same as ~io_action.bind(lambda _: m)~
  - This is present for all monads

Because Python uses eager evaluation, any IO action you create is run
immediately. You can put the action in a function to delay its
evaluation. Make sure to add a ~run()~ call to the end of your action
when it is evaluated, otherwise the last IO action in the IO action
will not be called. In Haskell you never have to run a ~run()~ function
because the program is made up of a ~IO ()~ called ~main~ at the
top-level. But this code doesn't enforce some sort of ~io_main~ that you
must assign, instead you have to run the IO monad yourself.

Below is a program that asks the user to enter text, and writes that
text with an exclamation point into a file in the same directory
called ~test_file.txt~.
#+BEGIN_SRC python
  from monad.io import io_print, io_close, io_write, io_open, io_input

  io_print('Enter some text: ') \
  .then(io_input()) \
      .bind(lambda text: io_open('test_file.txt', 'w') \
	    .bind(lambda handle: io_write(handle, text + '!') \
		  .then(io_close(handle)) \
		  .then(io_print('Done')))).run()
#+END_SRC
This examples can be found in the file ~examples/io.py~.

** Maybe
Functions
- ~Just(x)~ specifies a Maybe that has a value
- ~Nothing()~ a Maybe with no value
- ~Maybe.lift(x)~ equivalent to ~Just(x)~

Below is an example program that takes two integers (~x~ and ~y~) from the console
and adds them (~x~ + ~y~). If the user gives non-integers it will continue to ask
until an integer is given.

Below is an example that askes the user to input a number for X in the
equation ~42 / X = Y~. If the user doesn't input a number, a ~Left(x)~
value is produced indicating an error. If the user chooses to input ~0~,
a different ~Left(x)~ value is produced. Otherwise the computation
continues in a ~Right(x)~ value.

#+BEGIN_SRC python
  from monad.maybe import Maybe, Just, Nothing

  def lift_input(prompt):
      text = input(prompt)
      if text:
	  return Just(text)
      return Nothing()

  def try_parse_int(s):
      try:
	  return Just(int(s))
      except ValueError:
	  return Nothing()

  def input_int(prompt):
      m = lift_input(prompt).bind(try_parse_int)
      if isinstance(m, Nothing):
	  return input_int(prompt)
      return m

  input_int('X = ') \
      .bind(lambda x: input_int('Y = ').bind(lambda y: Maybe.lift(x + y))) \
      .fmap(lambda sum: print('X + Y = ' + str(sum)))
#+END_SRC
This example can be found in ~examples/maybe.py~.

** Either
The Either monad indicates successful computations with a ~Right~ value
and errors with its ~Left~ value. It is similar to the Maybe monad, but
instead of ~Nothing~ carrying no information, ~Left(x)~ propagates
information along with the error.

Functions
- ~Either.lift(x)~ lifts a value into the Either monad (same as
  ~Right(x)~)
- ~Right(x)~ indicates a successful computation yielding a value ~x~
- ~Left(x)~ indicates an error that yieled a value ~x~
- ~either.get()~ extracts the value from the Either monad (works for
  both ~Right(x)~ and ~Left(x)~)

#+BEGIN_SRC python
from monad.either import Either, Left, Right

def safe_div(n, d):
    if d == 0:
        return Left('Division by zero')
    return Right(n / d)

def safe_parse_int(s):
    try:
        return Right(int(s))
    except ValueError:
        return Left('Input "%s" could not be interpreted as an integer.' % s)

def safe_input_int(prompt):
    s = input(prompt)
    return safe_parse_int(s)
    
if __name__ == '__main__':
   e = safe_input_int('Enter a number to divide 42 by: ').bind(lambda i: \
            safe_div(42, i).bind(lambda v: print('42 / %s = %s' % (i, v))))
   if (isinstance(e, Left)):
       print('The Either monad indicated an error: ', end='')
       print(e.get())
#+END_SRC
This example can be found in ~examples/either.py~.

** Reader
Functions
- ~Reader.ask()~ creates a new reader that gets the environment
- ~reader.local(f)~ creates a new reader, that maps function ~f~ before
  running
- ~Reader.lift(x)~ creates a reader that ignores the environment, and
  yields the value ~x~ (equivalent to ~return~)

The Reader monad can be used to implicitly propagate a symbol table in
an interpreter. In the ~examples/reader.py~ file there is a complete
toy interpreter that works with the Reader monad.

The difference between using the reader monad and not is that the
evaluation returns a ~Reader Environment Value~. That means after
evaluating you have to call ~reader.run(env)~ and pass it an environment to
start with. Lexical scoping can be accomplished with the
~reader.local(f)~ function (it will extend the environment for all
readers that are created below that one).

#+BEGIN_SRC python
class Expr: pass
class Unit(Expr):
    '''
    Indicates no value
    '''
    def eval(self):
        return Reader.lift(UnitVal())

class Lit(Expr):
    '''
    A literal value (number, string, etc...)
    '''
    def __init__(self, val):
        self.val = val
        
    def eval(self):
        return Reader.lift(LitVal(self.val))

class Sym(Expr):
    '''
    A symbol (used as identifiers for functions)
    '''
    def __init__(self, name):
        self.name = name
        
    def eval(self):
        return Reader.ask().bind(lambda env: Reader.lift(env.lookup(self.name)))

class App(Expr):
    '''
    Function application (curried)
    '''
    def __init__(self, sym, expr):
        self.sym = sym
        self.expr = expr

    def eval(self):
        return \
            self.sym.eval().bind(lambda f: \
                self.expr.eval().bind(lambda v: \
                                      Reader.lift(f(v))))

class Let(Expr):
    '''
    Binds a name to a value, inside of the body
    '''
    def __init__(self, sym, expr, body):
        self.sym = sym
        self.expr = expr
        self.body = body

    def eval(self):
        return \
            self.expr.eval().bind(lambda v: \
                self.body.eval().local(lambda env: \
                    env.extend(self.sym, v)))

class If(Expr):
    '''
    If predicate ~pred~ is truthy, evaluates ~then~ part, otherwise evaluates ~other~ part
    '''
    def __init__(self, pred, then, other):
        self.pred = pred
        self.then = then
        self.other = other

    def eval(self):
        return self.pred.eval() \
                     .bind(lambda v: \
                        self.then.eval() if bool(v.val) else self.other.eval())
#+END_SRC

For this toy interpreter, there is a special Environment class (that
serves as the symbol table). It is made pure so that the
~reader.local(f)~ calls don't have side effects.

#+BEGIN_SRC python
class Environment:
    '''
    Pure lexical environment
    '''
    def __init__(self, env=None):
        self.env = env if env else []

    def extend(self, name, val):
        return Environment(self.env + [[name, val]])

    def lookup(self, name):
        for sym, val in reversed(self.env):
            if name == sym.name:
                return val
        raise Exception('Symbol %s not found in environment' % name)
#+END_SRC

The environment can be pre-loaded with built-in symbols. I have
included a few to do basic math with:

#+BEGIN_SRC python
DEFAULT_ENVIRONMENT = Environment([
    [Sym('+'), lambda x: lambda y: LitVal(x.val + y.val)],
    [Sym('-'), lambda x: lambda y: LitVal(x.val - y.val)],
    [Sym('*'), lambda x: lambda y: LitVal(x.val * y.val)],
    [Sym('/'), lambda x: lambda y: LitVal(x.val / y.val)],
    [Sym('sqrt'), lambda x: LitVal(math.sqrt(x.val))],    
    [Sym('print'), lambda x: [print(x.val), UnitVal()][1]],
    [Sym('input'), lambda x: [input(x.val), UnitVal()][1]],
    [Sym('pi'), LitVal(math.pi)],
])
#+END_SRC

Then a program can be written, evaluated, and the reader can be run on
it to yield a value:

#+BEGIN_SRC python
  val = Let(Sym('x'), Lit(5),
	  Let(Sym('y'), Lit(2),
	      Let(Sym('squaredSum'), App(App(Sym('+'), App(App(Sym('*'), Sym('x')), Sym('x'))),
					 App(App(Sym('*'), Sym('y')), Sym('y'))),
		  App(Sym('sqrt'), Sym('squaredSum'))))).eval().run(DEFAULT_ENVIRONMENT)
#+END_SRC

** List
The List monad is useful when doing computations over lists that may
or may not yield more than one result. The ~bind~ operator is a ~flatMap~.

Functions:
- ~list.get()~ extracts the Python list from the List monad
- ~List.lift(x)~ same as ~List([x])~

Below is an example of computing all right triangles that have lengths
1 to ~max~ (where ~max~ is some number given by the user) that have
integer hypotenuses. Is it useful? I'm not sure. But it demonstrates
the List monad.

This example also uses the Either monad to get an integer from the
user, and to validate that it is within 10 and 1000.

#+BEGIN_SRC python
import math

from monad.list import List
from monad.either import Left, Right
from either import safe_input_int

def validate_max(v):
    return Left('The max triangle side length must be between 10 and 1000.') if 10 > v < 1000 else Right(v)

class Answer:
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c
        self.is_integer = c % 1 == 0

    def __repr__(self):
        return '%s^2 + %s^2 = %s^2' % (self.a, self.b, int(self.c) if self.is_integer else self.c)

if __name__ == '__main__':
    # computes all right triangles with lengths from 1 to the user inputed max length
    # where the hypotenuse is an integer
    v = safe_input_int('Enter a max triangle side length [10 - 1000]: ') \
        .bind(validate_max) \
        .bind(lambda max: \
              Right(List(range(1, max)).bind(lambda a: \
                    List(range(1, max)).bind(lambda b: List.lift(Answer(a, b, math.sqrt(a*a + b*b)))) \
                            .filter(lambda ans: ans.is_integer))))
    if isinstance(v, Left):
        print('An error has occured: ' + v.get())
    else:
        print('\n'.join(map(repr, v.get().get())))
#+END_SRC
This example can be found in ~examples/list.py~.
